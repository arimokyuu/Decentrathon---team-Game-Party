import streamlit as st
import requests
from PIL import Image, ImageDraw
from openai import OpenAI
import base64

# üîë API-–∫–ª—é—á–∏
API_KEY_ROBOFLOW = "EFy7lQ764ESqzbgxlhug"
MODEL_URL = "https://detect.roboflow.com/car-damages-detection-lnsbx/1"
client = OpenAI(api_key=" ")  # <-- –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ –∫–ª—é—á 

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è GPT –æ–ø–∏—Å–∞–Ω–∏—è ---
def classify_with_gpt(image_bytes):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ GPT –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ base64
        encoded_image = base64.b64encode(image_bytes).decode("utf-8")

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text",
                         "text": """–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–≤—É–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: –±–∏—Ç—ã–π –∏–ª–∏ –Ω–µ–±–∏—Ç—ã–π.
2. –ß–∏—Å—Ç–æ—Ç–∞: —á–∏—Å—Ç—ã–π, —Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω–æ –≥—Ä—è–∑–Ω—ã–π.

–û—Ç–≤–µ—Ç –¥–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–≤—Ç–æ–º–æ–±–∏–ª—å [—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å], [—á–∏—Å—Ç–æ—Ç–∞]."""
                         },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{encoded_image}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=50,
            temperature=0.2,
        )

        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {e}"

# --- Streamlit UI ---
st.set_page_config(page_title="Car Inspector AI", layout="wide")
st.title("üöó AI-–û—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, –∏ AI –Ω–∞–π–¥—ë—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ.")

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã", type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ", width=600)

    # –î–µ–ª–∞–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
    image_bytes = uploaded_file.getvalue()

    st.info("‚åõ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Roboflow...")

    # --- Roboflow –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ ---
    response = requests.post(
        f"{MODEL_URL}?api_key={API_KEY_ROBOFLOW}",
        files={"file": image_bytes},
        data={"confidence": 20, "overlap": 30}
    )

    result = response.json()
    damage_detected = False

    if "predictions" in result and len(result["predictions"]) > 0:
        damage_detected = True
        draw_img = image.convert("RGBA")
        overlay = Image.new("RGBA", draw_img.size, (0, 0, 0, 0))
        draw = ImageDraw.Draw(overlay)

        for pred in result["predictions"]:
            label = pred["class"]
            conf = pred["confidence"]

            if "points" in pred:
                points = [(p["x"], p["y"]) for p in pred["points"]]
                draw.polygon(points, outline="red", fill=(255, 0, 0, 80))
                draw.text(points[0], f"{label} {conf:.2f}", fill="red")
            else:
                x, y, w, h = pred["x"], pred["y"], pred["width"], pred["height"]
                x0, y0 = x - w / 2, y - h / 2
                x1, y1 = x + w / 2, y + h / 2
                draw.rectangle([x0, y0, x1, y1], outline="red", width=3)
                draw.text((x0, y0 - 10), f"{label} {conf:.2f}", fill="red")

        final_img = Image.alpha_composite(draw_img, overlay).convert("RGB")
        st.image(final_img, caption="üö® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", width=600)
    else:
        st.warning("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚úÖ")

    # --- GPT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ ---
    st.subheader("üìä –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è (GPT –ê–Ω–∞–ª–∏–∑)")
    classification = classify_with_gpt(image_bytes)
    st.success(classification)
